---
- name: Setup Docker, Prometheus and Grafana
  hosts: monitoring
  become: yes

  vars:
    grafana_port: 3000
    prometheus_port: 9090

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker and Docker Compose
      apt:
        name:
          - docker.io
          - docker-compose
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Enable and start Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Create Docker Compose file
      copy:
        dest: /home/ubuntu/docker-compose.yml
        content: |
          version: '3'
          services:
            prometheus:
              image: prom/prometheus
              ports:
                - "9090:9090"
              volumes:
                - ./prometheus.yml:/etc/prometheus/prometheus.yml
            grafana:
              image: grafana/grafana
              ports:
                - "3000:3000"
              volumes:
                - ./grafana:/etc/grafana/provisioning
              environment:
                - GF_SECURITY_ADMIN_PASSWORD=admin

    - name: Copy prometheus.yml config
      copy:
        src: prometheus.yml
        dest: /home/ubuntu/prometheus.yml

    - name: Copy Grafana provisioning config
      copy:
        src: grafana/provisioning/dashboards.yaml
        dest: /home/ubuntu/grafana/provisioning/dashboards.yaml

    - name: Copy Grafana dashboard JSON
      copy:
        src: grafana/dashboards/node_exporter.json
        dest: /home/ubuntu/grafana/dashboards/node_exporter.json

    - name: Run docker-compose
      command: docker-compose up -d
      args:
        chdir: /home/ubuntu

    - name: Wait for Grafana to be available
      uri:
        url: "http://localhost:{{ grafana_port }}"
        return_content: yes
      register: grafana_status
      retries: 10
      delay: 5
      until: grafana_status.status == 200

    - name: Wait for Prometheus to be available
      uri:
        url: "http://localhost:{{ prometheus_port }}"
        return_content: yes
      register: prometheus_status
      retries: 10
      delay: 5
      until: prometheus_status.status == 200
